import pandas as pd
import gdal
import os
import numpy as np
import fiona
import shapely
from shapely import geometry,ops
from os.path import dirname
import glob
import sys
import pickle
from functools import partial
import pyproj

def main():
    """ Write REW configuration file. 
    
    This function converts GIS data related topology and physical characteristics into a Pandas dataframe that is written to rew_config.p in the model_data directory.
    
    Each row in the dataframe represents a REW. 
    
    Dataframe columns include:
        - next_stream (int): index of REW containing child stream; set to -1 if no such stream exists.
        - prev_str01 (int): index of REW containing parent stream; set to 0 if no such stream exists.
        - prev_str02 (int): index of REW containing parent stream; set to 0 if no such stream exists.
        - strahler (int): Horton-Strahler number of REW's stream
        - shreve (int): Shreve number of REW's stream
        - length (float): channel length
        - flow_accum (float): total upstream accumulated area
        - out_dist (float): distance to outlet 
        - elev_drop (float): eleveation drop from REW to outlet
        - gradient (float): gradient along REW's channel
        - group: REW group 
    
    Args: 
        - None
        
    Returns:
        - None
    """
    #get topology file generated by grass script
    print '\n'
    print 'Fetching REW configuration data...'
    parent_dir = dirname(dirname(os.getcwd()))
    top_file = os.path.join(parent_dir,'raw_data','topology','topology.csv')
    df = pd.read_csv(top_file)
    basin_file = os.path.join(parent_dir,'raw_data','topology','basin.csv')
    df_basins = pd.read_csv(basin_file)
    
    #remove duplicates, cleanup dataframe
    df = df.drop_duplicates()
    df = df[df.cat != 0]
    df['next_stream']=df['next_stream'].astype(int)
    df['prev_str01']=df['prev_str01'].astype(int)
    df['prev_str02']=df['prev_str02'].astype(int)
    df['strahler']=df['strahler'].astype(int)
    df['shreve']=df['shreve'].astype(int)
    
    
    #get area of each REW into table 
    df['rew']=df['cat']
    rew_config = df[['rew','next_stream','prev_str01','prev_str02','strahler','shreve','length','flow_accum','out_dist','elev_drop','gradient']].set_index('rew')
    del df_basins['label']
    df_basins.set_index('cat', inplace=True)
    rew_config = pd.concat([rew_config, df_basins], axis=1)
    #Assign groups
    rew_config['group']=get_groups(rew_config)

    #Get basins from shapefile to check that the REW ids and basins ids match
    try:
        basins = glob.glob(os.path.join(parent_dir,'raw_data','basins_poly','*.shp'))[0]
    except RuntimeError:
        print 'Cannot find basins shapefile. Please make sure basins shapefile is located in \n the model directory under /raw_data/basins_poly'
    fc = fiona.open(basins)
    shapefile_record = fc.next()
    basins_list = []
    for shapefile_record in fc:
        rew_idx = int(shapefile_record['properties']['cat'])
        basins_list.append(rew_idx)
        if rew_idx == -1: continue
        shape = shapely.geometry.asShape(shapefile_record['geometry'])


    #get areas in cm^2, lengths in cm
    rew_config['area_sqcm'] = rew_config['area_sqkm']*10**10
    rew_config['upstream_area'] = 0
    for rew_id in rew_config.index:
        rew_config.loc[rew_config.index==rew_id,'upstream_area'] = get_upstream_contributing(rew_config, rew_id)
    rew_config['length']=rew_config['length']*100
    rew_config['out_dist']=rew_config['out_dist']*100
    rew_config['elev_drop']=rew_config['elev_drop']*100


    #Print results of REW setup
    x = list(df['rew'])
    x.sort()
    basins_list.sort()
    print('REW IDs used: ' + str(x))
    print('Corresponding basin IDs: ' + str(basins_list))
    if x==basins_list:
        print 'REW IDs and basin IDs match!'
    else: 
        print 'REW IDs do not match basins IDs. REW config file cannot be written. \n Please clear out model data folders and re-run extract stream basins script.'
    print('Total number of REW IDs used: %d'%len(x))
    print 'Total number of unique REW group(s): ' + str(len(set(rew_config['group']))) + '\n'


    #save config dataframe into model_data folder
    pickle.dump( rew_config, open( os.path.join(parent_dir,'model_data','rew_config.p'), "wb" ) )
    
def get_groups(rew_config):
    #to be used later for grouping REWs to save VadoseZone compute time
    #for now, just return a single group, 0
    return [0]*len(rew_config)


def get_upstream_contributing(rew_config, rew_id):
    if (rew_config.prev_str02.loc[rew_id]==0) and (rew_config.prev_str01.loc[rew_id]==0):
        return rew_config.area_sqcm.loc[rew_id]
    else:
        return rew_config.area_sqcm.loc[rew_id] + get_upstream_contributing(rew_config, rew_config.prev_str02.loc[rew_id]) + get_upstream_contributing(rew_config, rew_config.prev_str01.loc[rew_id])

        





if __name__ == '__main__': 
    main()